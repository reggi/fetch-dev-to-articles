{
  "type_of": "article",
  "id": 1391497,
  "title": "The Problem with Using Databases on the Edge / Serverless.",
  "description": "What's the deal with Databases and Severless? Sometimes it seems like they don't mix well together...",
  "readable_publish_date": "Mar 30",
  "slug": "the-problem-with-using-databases-on-the-edge-serverless-50fp",
  "path": "/reggi/the-problem-with-using-databases-on-the-edge-serverless-50fp",
  "url": "https://dev.to/reggi/the-problem-with-using-databases-on-the-edge-serverless-50fp",
  "comments_count": 0,
  "public_reactions_count": 0,
  "collection_id": null,
  "published_timestamp": "2023-03-30T20:54:12Z",
  "positive_reactions_count": 0,
  "cover_image": null,
  "social_image": "https://dev.to/social_previews/article/1391497.png",
  "canonical_url": "https://dev.to/reggi/the-problem-with-using-databases-on-the-edge-serverless-50fp",
  "created_at": "2023-03-07T06:59:55Z",
  "edited_at": null,
  "crossposted_at": null,
  "published_at": "2023-03-30T20:54:12Z",
  "last_comment_at": "2023-03-30T20:54:12Z",
  "reading_time_minutes": 5,
  "tag_list": "",
  "tags": [],
  "body_html": "<p>What's the deal with Databases and Severless? Sometimes it seems like they don't mix well together like oil and water. What's all the fuss about? </p>\n\n<p>Here's a deep dive video companion to this article:</p>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/63AGbDMM7Bk\" allowfullscreen loading=\"lazy\">\n</iframe>\n</p>\n\n<h2>\n  <a name=\"what-is-serverless\" href=\"#what-is-serverless\">\n  </a>\n  What is serverless?\n</h2>\n\n<p>The dreaded term \"serverless\" has come with some animocity as of recently for it's really not the best descriptior for the technology, but it overall encompases the idea that a server operation will be ephemeral. But a server still exists. Traditional servers operate with an \"always on\" and \"ready\" mentality where as serverless functions or endpoints are spun up at the time of request, and then broken down. This is important to note because when incopreating persistant data and databases into these functions or endpoints we need to connect to them and the ephemeral nature of serverless means, worst case scenario we'd be creating a client connection to a database each time we make use the serverless function. </p>\n\n<h2>\n  <a name=\"what-does-on-the-edge-mean\" href=\"#what-does-on-the-edge-mean\">\n  </a>\n  What does \"on the edge\" mean?\n</h2>\n\n<p>The overall idea of the \"edge\" takes serverless to the next level. It's about distributing serveless functions across the globe in many different data centers in different countries. An edge network then routes requests to the nearest datacenter to spin up that serverless operation closer to the end user.</p>\n\n<h2>\n  <a name=\"cloud-providers-amp-database-clients\" href=\"#cloud-providers-amp-database-clients\">\n  </a>\n  Cloud Providers &amp; Database Clients\n</h2>\n\n<p>There are many different cloud providers from AWS Lambda, Google Cloud Functions, Vercel Edge Functions, Deno Deploy and Cloudflare Workers. They all have the potential to handle the programming runtime differently, they all may have different TTL between requests. </p>\n\n<p>In addition database clients may handle client connections, and pooling differently by default, and it may mean you need to structure your code in a specific way. The database service provider also may have connection pooling settings as well. </p>\n\n<h2>\n  <a name=\"breaking-the-edge\" href=\"#breaking-the-edge\">\n  </a>\n  Breaking the edge\n</h2>\n\n<p>I first saught out to create an example to \"break\" the edge / database connection, by creating too many requests to an edge-run webpage. The goal of this exersize is to create too many connections without cleaning them up the worst-case scenario. For this deep dive we'll be using Deno Deploy as an example of a severless / edge arcitecture to quickly get some Typescirpt code up and running.</p>\n\n<p>Here's some initial code. This outputs a webpage with some json that looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}]</span><span class=\"w\">\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>What does this code do? This creates a connection to a postgres database and queries how many connections the database is currently using.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">serve</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">https://deno.land/std@0.177.0/http/server.ts</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Client</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">https://deno.land/x/postgres@v0.17.0/mod.ts</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// this is needed to aid the query </span>\n<span class=\"nx\">BigInt</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">toJSON</span><span class=\"dl\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">());</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"s2\">`\nselect max_conn,used,res_for_super,max_conn-used-res_for_super res_for_normal \nfrom \n  (select count(*) used from pg_stat_activity) t1,\n  (select setting::int res_for_super from pg_settings where name=$$superuser_reserved_connections$$) t2,\n  (select setting::int max_conn from pg_settings where name=$$max_connections$$) t3\n`</span>\n\n<span class=\"nx\">serve</span><span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">:</span> <span class=\"nx\">Request</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Client</span><span class=\"p\">(</span><span class=\"nx\">Deno</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">DBURI</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">connection</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">queryObject</span><span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"nx\">Response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">rows</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>I then created another endpoint to \"bombard\" the postgres database with a bunch of connections. This sends several requests to the above url at onceusing <code>Promise.all</code>. The code looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">serve</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">https://deno.land/std@0.177.0/http/server.ts</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">ping</span> <span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">Deno</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">PING_URL</span><span class=\"dl\">'</span><span class=\"p\">))</span>\n  <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">serve</span><span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">:</span> <span class=\"nx\">Request</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">example</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">all</span><span class=\"p\">([</span>\n    <span class=\"nx\">ping</span><span class=\"p\">(),</span> <span class=\"nx\">ping</span><span class=\"p\">(),</span> <span class=\"nx\">ping</span><span class=\"p\">(),</span> <span class=\"nx\">ping</span><span class=\"p\">(),</span> \n    <span class=\"nx\">ping</span><span class=\"p\">(),</span> <span class=\"nx\">ping</span><span class=\"p\">(),</span> <span class=\"nx\">ping</span><span class=\"p\">(),</span> <span class=\"nx\">ping</span><span class=\"p\">(),</span>\n    <span class=\"nx\">ping</span><span class=\"p\">(),</span> <span class=\"nx\">ping</span><span class=\"p\">(),</span> <span class=\"nx\">ping</span><span class=\"p\">(),</span> <span class=\"nx\">ping</span><span class=\"p\">(),</span>\n  <span class=\"p\">])</span>\n  <span class=\"k\">return</span> <span class=\"nx\">Response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">([</span><span class=\"nx\">example</span><span class=\"p\">])</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And here's the output from this endpoint. This is showing the used connections fluctuating fro 14 to 21.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">[</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">43</span><span class=\"p\">}],</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">39</span><span class=\"p\">}],</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}],</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">40</span><span class=\"p\">}],</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">41</span><span class=\"p\">}],</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">38</span><span class=\"p\">}],</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">42</span><span class=\"p\">}],</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}],</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}],</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">40</span><span class=\"p\">}],</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}],</span><span class=\"w\">\n  </span><span class=\"p\">[{</span><span class=\"nl\">\"max_conn\"</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"nl\">\"used\"</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_super\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nl\">\"res_for_normal\"</span><span class=\"p\">:</span><span class=\"mi\">40</span><span class=\"p\">}]</span><span class=\"w\">\n</span><span class=\"p\">]</span><span class=\"w\">\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>What happens when the \"used\" number of connections is exhaused? The app will crash, and requests will drop. </p>\n\n<p>This example may not be 100% fair, it's happening mainly because I'm doing something really evil here, I'm calling <code>new Client</code> from within the <code>serve</code> hander which causes the connections to be created every time there's a request. Interestingly enough when I hoist this outside of the <code>serve</code> callback, this fluctuation doesn't occur (perhaps that's because it's because I'm hitting the same datacenter), this may be because Deno Deploy or the Deno Postgres library is keeping the root scope of this edge function alive in some way. This again will vary across providers, runtimes, and clients. But this demonstration paints a visual and tanible picture of how you can shoot yourself in the foot while working with databases within the servereless edge.</p>\n\n<h2>\n  <a name=\"the-antidote\" href=\"#the-antidote\">\n  </a>\n  The Antidote\n</h2>\n\n<p>What does this mean for using Databases within Edge functions? It's scary to code for the edge when it may be a situation where \"it works for me\" but once many requests are going through the system from different data centers everything comes to a screaching halt. It's also scarry to think about vendor lock-in where things may be working within one edge provider but you can't switch out of fear that the runtime handling would be different on another provider.</p>\n\n<p>The solution is kind of right in front of our eyes. The problem is connection pooling and connecting to the database directly many times. What if you didn't need to do that? What if we had a proxy that wasn't an edge function that we could use as an intermediary between the database and our edge function? This is the classic microservice architecture, utilizing an API to interact with the database on your behalf. With http requests you can ping this proxy layer and the proxy will handle the connection pooling for you, all you app would have to do is call <code>fetch</code>.</p>\n\n<p>ORMs like Prisma provide this baked into the client, prisma provides a service called aptly <a href=\"https://www.prisma.io/docs/data-platform/data-proxy\">Data Proxy</a> that does just what we described. This allows your edge functions to not have to worry about any of the aforementioned connection and pooling troubles. A middle layer between your app and the database allows your core business logic to be on the edge and allows you to interact with your database without the hassle.</p>\n\n<p>Here's a visual:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--45CKGW_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv8mliyslpmq73rdckfk.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--45CKGW_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv8mliyslpmq73rdckfk.png\" alt=\"graph showing proxy layer\" loading=\"lazy\" width=\"880\" height=\"728\"></a></p>\n\n<h2>\n  <a name=\"wrap-up\" href=\"#wrap-up\">\n  </a>\n  Wrap up\n</h2>\n\n<p>The world of serverless computing and edge functions is fresh and exciting! I think it's a growing architecture that shifts how we think about designing software and provides really quick, snappy, and responsive websites. It's exciting to watch this technology grow and what people will do with it in the future. </p>\n\n<p>If you're interested in learning more about Data Proxies, here are some great tutorials showing how to incorporate Data Proxy into different apps from Next.js to Deno's Oak. </p>\n\n<ul>\n<li><a href=\"https://www.prisma.io/blog/database-access-on-the-edge-8F0t1s1BqOJE\">Database access on the Edge with Next.js, Vercel &amp; Prisma Data Proxy</a></li>\n<li><a href=\"https://deno.com/blog/persistent-data-npm\">Persist Data in Deno with npm using Prisma, Mongoose, Apollo, and more.</a></li>\n<li><a href=\"https://deno.land/manual@v1.28.2/node/how_to_with_npm/prisma\">How to create a RESTful API with Prisma and Oak</a></li>\n</ul>\n\n",
  "body_markdown": "What's the deal with Databases and Severless? Sometimes it seems like they don't mix well together like oil and water. What's all the fuss about? \n\nHere's a deep dive video companion to this article:\n\n{% embed https://www.youtube.com/embed/63AGbDMM7Bk %}\n\n## What is serverless?\n\nThe dreaded term \"serverless\" has come with some animocity as of recently for it's really not the best descriptior for the technology, but it overall encompases the idea that a server operation will be ephemeral. But a server still exists. Traditional servers operate with an \"always on\" and \"ready\" mentality where as serverless functions or endpoints are spun up at the time of request, and then broken down. This is important to note because when incopreating persistant data and databases into these functions or endpoints we need to connect to them and the ephemeral nature of serverless means, worst case scenario we'd be creating a client connection to a database each time we make use the serverless function. \n\n## What does \"on the edge\" mean?\n\nThe overall idea of the \"edge\" takes serverless to the next level. It's about distributing serveless functions across the globe in many different data centers in different countries. An edge network then routes requests to the nearest datacenter to spin up that serverless operation closer to the end user.\n\n## Cloud Providers & Database Clients\n\nThere are many different cloud providers from AWS Lambda, Google Cloud Functions, Vercel Edge Functions, Deno Deploy and Cloudflare Workers. They all have the potential to handle the programming runtime differently, they all may have different TTL between requests. \n\nIn addition database clients may handle client connections, and pooling differently by default, and it may mean you need to structure your code in a specific way. The database service provider also may have connection pooling settings as well. \n\n## Breaking the edge\n\nI first saught out to create an example to \"break\" the edge / database connection, by creating too many requests to an edge-run webpage. The goal of this exersize is to create too many connections without cleaning them up the worst-case scenario. For this deep dive we'll be using Deno Deploy as an example of a severless / edge arcitecture to quickly get some Typescirpt code up and running.\n\nHere's some initial code. This outputs a webpage with some json that looks like this: \n\n```json\n[{\"max_conn\":60,\"used\":13,\"res_for_super\":3,\"res_for_normal\":17}]\n```\n\nWhat does this code do? This creates a connection to a postgres database and queries how many connections the database is currently using. \n\n```ts\nimport { serve } from \"https://deno.land/std@0.177.0/http/server.ts\";\nimport { Client } from \"https://deno.land/x/postgres@v0.17.0/mod.ts\";\n\n// this is needed to aid the query \nBigInt.prototype['toJSON'] = function () {\n    return parseInt(this.toString());\n};\n\nconst query = `\nselect max_conn,used,res_for_super,max_conn-used-res_for_super res_for_normal \nfrom \n  (select count(*) used from pg_stat_activity) t1,\n  (select setting::int res_for_super from pg_settings where name=$$superuser_reserved_connections$$) t2,\n  (select setting::int max_conn from pg_settings where name=$$max_connections$$) t3\n`\n\nserve(async (req: Request) => {\n  const client = new Client(Deno.env.get(\"DBURI\"));\n  const connection = await client.connect();\n  const data = await client.queryObject(query)\n  return Response.json(data.rows)\n});\n```\n\nI then created another endpoint to \"bombard\" the postgres database with a bunch of connections. This sends several requests to the above url at onceusing `Promise.all`. The code looks like this:\n\n```ts\nimport { serve } from \"https://deno.land/std@0.177.0/http/server.ts\";\n\nasync function ping (url: string) {\n  const response = await fetch(Deno.get('PING_URL'))\n  return await response.json()\n}\n\nserve(async (req: Request) => {\n  const example = await Promise.all([\n    ping(), ping(), ping(), ping(), \n    ping(), ping(), ping(), ping(),\n    ping(), ping(), ping(), ping(),\n  ])\n  return Response.json([example])\n});\n```\n\nAnd here's the output from this endpoint. This is showing the used connections fluctuating fro 14 to 21. \n\n```json\n[\n  [{\"max_conn\":60,\"used\":14,\"res_for_super\":3,\"res_for_normal\":43}],\n  [{\"max_conn\":60,\"used\":18,\"res_for_super\":3,\"res_for_normal\":39}],\n  [{\"max_conn\":60,\"used\":21,\"res_for_super\":3,\"res_for_normal\":36}],\n  [{\"max_conn\":60,\"used\":17,\"res_for_super\":3,\"res_for_normal\":40}],\n  [{\"max_conn\":60,\"used\":16,\"res_for_super\":3,\"res_for_normal\":41}],\n  [{\"max_conn\":60,\"used\":19,\"res_for_super\":3,\"res_for_normal\":38}],\n  [{\"max_conn\":60,\"used\":15,\"res_for_super\":3,\"res_for_normal\":42}],\n  [{\"max_conn\":60,\"used\":21,\"res_for_super\":3,\"res_for_normal\":36}],\n  [{\"max_conn\":60,\"used\":21,\"res_for_super\":3,\"res_for_normal\":36}],\n  [{\"max_conn\":60,\"used\":17,\"res_for_super\":3,\"res_for_normal\":40}],\n  [{\"max_conn\":60,\"used\":21,\"res_for_super\":3,\"res_for_normal\":36}],\n  [{\"max_conn\":60,\"used\":17,\"res_for_super\":3,\"res_for_normal\":40}]\n]\n```\n\nWhat happens when the \"used\" number of connections is exhaused? The app will crash, and requests will drop. \n\nThis example may not be 100% fair, it's happening mainly because I'm doing something really evil here, I'm calling `new Client` from within the `serve` hander which causes the connections to be created every time there's a request. Interestingly enough when I hoist this outside of the `serve` callback, this fluctuation doesn't occur (perhaps that's because it's because I'm hitting the same datacenter), this may be because Deno Deploy or the Deno Postgres library is keeping the root scope of this edge function alive in some way. This again will vary across providers, runtimes, and clients. But this demonstration paints a visual and tanible picture of how you can shoot yourself in the foot while working with databases within the servereless edge.\n\n## The Antidote\n\nWhat does this mean for using Databases within Edge functions? It's scary to code for the edge when it may be a situation where \"it works for me\" but once many requests are going through the system from different data centers everything comes to a screaching halt. It's also scarry to think about vendor lock-in where things may be working within one edge provider but you can't switch out of fear that the runtime handling would be different on another provider.\n\nThe solution is kind of right in front of our eyes. The problem is connection pooling and connecting to the database directly many times. What if you didn't need to do that? What if we had a proxy that wasn't an edge function that we could use as an intermediary between the database and our edge function? This is the classic microservice architecture, utilizing an API to interact with the database on your behalf. With http requests you can ping this proxy layer and the proxy will handle the connection pooling for you, all you app would have to do is call `fetch`.\n\nORMs like Prisma provide this baked into the client, prisma provides a service called aptly [Data Proxy](https://www.prisma.io/docs/data-platform/data-proxy) that does just what we described. This allows your edge functions to not have to worry about any of the aforementioned connection and pooling troubles. A middle layer between your app and the database allows your core business logic to be on the edge and allows you to interact with your database without the hassle.\n\nHere's a visual:\n\n![graph showing proxy layer](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv8mliyslpmq73rdckfk.png)\n\n## Wrap up \n\nThe world of serverless computing and edge functions is fresh and exciting! I think it's a growing architecture that shifts how we think about designing software and provides really quick, snappy, and responsive websites. It's exciting to watch this technology grow and what people will do with it in the future. \n\nIf you're interested in learning more about Data Proxies, here are some great tutorials showing how to incorporate Data Proxy into different apps from Next.js to Deno's Oak. \n\n* [Database access on the Edge with Next.js, Vercel & Prisma Data Proxy](https://www.prisma.io/blog/database-access-on-the-edge-8F0t1s1BqOJE)\n* [Persist Data in Deno with npm using Prisma, Mongoose, Apollo, and more.](https://deno.com/blog/persistent-data-npm)\n* [How to create a RESTful API with Prisma and Oak](https://deno.land/manual@v1.28.2/node/how_to_with_npm/prisma)\n",
  "user": {
    "name": "Thomas Reggi",
    "username": "reggi",
    "twitter_username": "thomasreggi",
    "github_username": "reggi",
    "user_id": 274085,
    "website_url": "https://indieweb.social/@thomasreggi",
    "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--tHfYzZxa--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/274085/29eb3cad-1335-49b1-9f1d-35b2ee3717b0.jpeg",
    "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--qhQltV8A--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/274085/29eb3cad-1335-49b1-9f1d-35b2ee3717b0.jpeg"
  }
}